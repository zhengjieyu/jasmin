require "indcpa.jinc"
require "params.jinc"
require "poly.jinc"
require "polyvec.jinc"
require "gen_matrix.jinc"

export fn indcpa_keypair_jazz(reg u64 pkp, reg u64 skp, reg u64 coins)
{
  stack u8[MLKEM_SYMBYTES] randomness;
  reg ptr u8[MLKEM_SYMBYTES] randomnessp;
  inline int i;

  randomnessp = randomness;
  for i = 0 to MLKEM_SYMBYTES {
    randomnessp[i] = (u8)[coins + i];
  }
  __indcpa_keypair(pkp, skp, randomnessp);
}

export fn indcpa_enc_jazz(reg u64 ctp, reg u64 msgp, reg u64 pkp, reg u64 coinsp)
{
  stack u16[MLKEM_VECN] pkpv sp ep bp;
  stack u16[MLKEM_K*MLKEM_VECN] aat;
  stack u16[MLKEM_N] k epp v;
  stack u8[MLKEM_SYMBYTES] publicseed;
  stack u8[MLKEM_SYMBYTES] noiseseed;
  reg u64 i;
  reg u8 c nonce;
  stack u64 sctp;

  sctp = ctp;

  i = 0;
  while (i < MLKEM_SYMBYTES)
  {
    c = (u8)[coinsp+i];
    noiseseed[(int)i] = c;
    i += 1;
  }

  pkpv = __polyvec_frombytes(pkp);

  i = 0;
  pkp += MLKEM_POLYVECBYTES;
  while (i < MLKEM_SYMBYTES)
  {
    c = (u8)[pkp];
    publicseed[(int)i] = c;
    pkp += 1;
    i += 1;
  }

  k = _poly_frommsg(k, msgp);

  aat = __gen_matrix(publicseed, 1);

  nonce = 0;
  sp[0:MLKEM_N], sp[MLKEM_N:MLKEM_N], sp[2*MLKEM_N:MLKEM_N], ep[0:MLKEM_N] = _poly_getnoise_eta1_4x(sp[0:MLKEM_N], sp[MLKEM_N:MLKEM_N], sp[2*MLKEM_N:MLKEM_N], ep[0:MLKEM_N], noiseseed, nonce);

  nonce = 4;
  ep[MLKEM_N:MLKEM_N], ep[2*MLKEM_N:MLKEM_N], epp, bp[0:MLKEM_N] = _poly_getnoise_eta1_4x(ep[MLKEM_N:MLKEM_N], ep[2*MLKEM_N:MLKEM_N], epp, bp[0:MLKEM_N], noiseseed, nonce);


  sp = __polyvec_ntt(sp);
    
  bp[0:MLKEM_N] = __polyvec_pointwise_acc(bp[0:MLKEM_N], aat[0:MLKEM_VECN], sp);
  bp[MLKEM_N:MLKEM_N]= __polyvec_pointwise_acc(bp[MLKEM_N:MLKEM_N], aat[MLKEM_VECN:MLKEM_VECN], sp);
  bp[2*MLKEM_N:MLKEM_N] = __polyvec_pointwise_acc(bp[2*MLKEM_N:MLKEM_N], aat[2*MLKEM_VECN:MLKEM_VECN], sp);
  
  v = __polyvec_pointwise_acc(v, pkpv, sp);

  bp = __polyvec_invntt(bp);
  v = _poly_invntt(v);

  bp = __polyvec_add(bp, ep);
  v = _poly_add(v, epp);
  v = _poly_add(v, k);
  bp = __polyvec_reduce(bp);
  v  = __poly_reduce(v);

  ctp = sctp;
  __polyvec_compress(ctp, bp);
  ctp += MLKEM_POLYVECCOMPRESSEDBYTES;
  v = _poly_compress(ctp, v);
}



export fn indcpa_dec_jazz(reg u64 msgp, reg u64 ctp, reg u64 skp)
{
  __indcpa_dec(msgp, ctp, skp);
}

