export
fn test_vpcmpgt(reg u64 tmp) {
  reg u256 x y z;
  reg u128 i j k;

  y = #set0_256();
  x = #set0_256();
  z = #VPCMPGT_32u8(x, y);
  [:u256 tmp] = z;

  i = #set0_128();
  j = #set0_128();
  k = #VPCMPGT_8u16(i, j);
  [:u128 tmp + 32] = k;

  z = #VPCMPGT_8u32(x, y);
  [:u256 tmp + 64] = z;

  j = #VPCMPGT_2u64(i, [:u128 tmp]);
  k = #VPCMPGT_2u64(i, j);
  [:u128 tmp] = k;

  y = #VPCMPGT_4u64(x, [:u256 tmp]);
  z = #VPCMPGT_4u64(x, y);
  [:u256 tmp] = z;
}

export
fn test_vpcmpeq(reg u64 p) {
  reg u128 i j k;
  reg u256 x y z;

  i = [:u128 p];
  j = #VPCMPEQ_16u8(i, [:u128 p]);
  k = #VPCMPEQ_16u8(i, j);
  i = #VPCMPEQ_8u16(k, [:u128 p]);
  k = #VPCMPEQ_8u16(i, j);
  j = #VPCMPEQ_4u32(k, [:u128 p]);
  k = #VPCMPEQ_4u32(i, j);
  j = #VPCMPEQ_2u64(k, [:u128 p]);
  k = #VPCMPEQ_2u64(i, j);
  [:u128 p] = k;

  x = [:u256 p];
  y = #VPCMPEQ_32u8(x, [:u256 p]);
  z = #VPCMPEQ_32u8(x, y);
  x = #VPCMPEQ_16u16(z, [:u256 p]);
  z = #VPCMPEQ_16u16(x, y);
  y = #VPCMPEQ_8u32(z, [:u256 p]);
  z = #VPCMPEQ_8u32(x, y);
  y = #VPCMPEQ_4u64(z, [:u256 p]);
  z = #VPCMPEQ_4u64(x, y);
  [:u256 p] = z;

}

export
fn test_vpsign(reg u64 p) {
  reg u256 x = [:u256 p];
  reg u256 y = #VPSIGN_32s8(x, [:u256 p + 32]);
  reg u256 z = #VPSIGN_16s16(y, x);
  x = #VPSIGN_8s32(z, y);

  reg u128 a = #VPSIGN_4s32(x, [:u128 p + 64]);
  reg u128 b = #VPSIGN_8s16(a, x);
  reg u128 c = #VPSIGN_16s8(b, a);
  [:u128 p + 80] = c;
}
export 
fn test_vpcmp(reg u64 rp){
  #regmask reg u8 mask8;
  #regmask reg u16 mask16;
  #regmask reg u32 mask32;
  #regmask reg u64 mask64;

  reg u128 a0 b0;
  reg u256 a1 b1;
  reg u512 a2 b2;
  a0 = [:u128 rp];
  b0 = [:u128 rp];
  a1 = [:u256 rp];
  b1 = [:u256 rp];
  a2 = [:u512 rp];
  b2 = [:u512 rp];

  mask8 = #VPCMP_8u16u8(a0, b0, 1);
  mask8 = #VPCMP_4u32u8(a0, b0, 1);
  mask8 = #VPCMP_8u32u8(a1, b1, 1);
  mask8 = #VPCMP_4u64u8(a1, b1, 1);
  mask8 = #VPCMP_8u64u8(a2, b2, 1);

  mask16 = #VPCMP_16u8u16(a0, b0, 1);
  mask16 = #VPCMP_16u16u16(a1, b1, 1);
  mask16 = #VPCMP_16u32u16(a2, b2, 1);

  mask32 = #VPCMP_32u8u32(a1, b1, 1);
  mask32 = #VPCMP_32u16u32(a2, b2, 1);

  mask64 = #VPCMP_64u8u64(a2, b2, 1);

}