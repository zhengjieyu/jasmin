require "params.jinc"
require "poly.jinc"
export fn poly_csubq_jazz(reg u64 rp)
{
  stack u16[MLKEM_N] r;
  reg u16 t;
  inline int i;

  for i = 0 to MLKEM_N {
    t = (u16)[rp + 2*i];
    r[i] = t;
  }

  r = _poly_csubq(r);

  for i = 0 to MLKEM_N {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}

export fn poly_frommont_jazz(reg u64 rp) 
{
  inline int i;
  reg u16 t;
  stack u16[MLKEM_N] r;

  for i = 0 to MLKEM_N {
    t = (u16)[rp + 2*i];
    r[i] = t;
  }

  r = _poly_frommont(r);

  for i = 0 to MLKEM_N {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}

export fn poly_compress_jazz(reg u64 rp, reg u64 ap) 
{
  stack u16[MLKEM_N] a;
  reg u16 t;
  inline int i;

  for i = 0 to MLKEM_N {
    t = (u16)[ap + 2*i];
    a[i] = t;
  }

  a = _poly_compress(rp, a);
}
export fn poly_decompress_jazz(reg u64 rp, reg u64 ap) 
{
  stack u16[MLKEM_N] r;
  reg u16 t;
  inline int i;

  r = _poly_decompress(r, ap);

  for i = 0 to MLKEM_N {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}
export fn poly_frommsg_jazz(reg u64 rp, reg u64 ap) 
{
  stack u16[MLKEM_N] r;
  reg u16 t;
  inline int i;

  r = _poly_frommsg(r, ap);

  for i = 0 to MLKEM_N {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}

export fn poly_getnoise_eta1_8x_jazz(reg u64 rp, reg u64 seedp, reg u8 nonce)
{
  stack u16[8 * MLKEM_N] r;
  stack u8[MLKEM_SYMBYTES] seed;
  stack u64 srp;
  reg u16 t;
  reg u8 d;
  inline int i;

  srp = rp;

  for i = 0 to MLKEM_SYMBYTES {
    d       = (u8)[seedp + i];
    seed[i] = d;
  }

  r[0:MLKEM_N], r[MLKEM_N:MLKEM_N], r[2*MLKEM_N:MLKEM_N], r[3*MLKEM_N:MLKEM_N], r[4*MLKEM_N:MLKEM_N], r[5*MLKEM_N:MLKEM_N], r[6*MLKEM_N:MLKEM_N], r[7*MLKEM_N:MLKEM_N] = _poly_getnoise_eta1_8x(r[0:MLKEM_N], r[MLKEM_N:MLKEM_N], r[2*MLKEM_N:MLKEM_N], r[3*MLKEM_N:MLKEM_N], r[4*MLKEM_N:MLKEM_N], r[5*MLKEM_N:MLKEM_N], r[6*MLKEM_N:MLKEM_N], r[7*MLKEM_N:MLKEM_N], seed, nonce);

  rp = srp;
  for i = 0 to 8*MLKEM_N {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}
export fn poly_sub_jazz(reg u64 rp, reg u64 bp)
{
    stack u16[MLKEM_N] r;
    stack u16[MLKEM_N] b;
    reg u16 t;
    inline int i;
    for i = 0 to MLKEM_N {
        t = (u16)[rp + 2*i];
        r[i] = t;
        t = (u16)[bp + 2*i];
        b[i] = t;
    }
    r = _poly_sub(r, b);
    for i = 0 to MLKEM_N {
        t = r[i];
        (u16)[rp + 2*i] = t;
    }
}


export fn poly_add_jazz(reg u64 rp, reg u64 bp)
{
    stack u16[MLKEM_N] r;
    stack u16[MLKEM_N] b;
    reg u16 t;
    inline int i;
    for i = 0 to MLKEM_N {
        t = (u16)[rp + 2*i];
        r[i] = t;
        t = (u16)[bp + 2*i];
        b[i] = t;
    }
    r = _poly_add(r, b);
    for i = 0 to MLKEM_N {
        t = r[i];
        (u16)[rp + 2*i] = t;
    }
}

export fn poly_basemul_jazz(reg u64 rp, reg u64 ap, reg u64 bp) 
{
  stack u16[MLKEM_N] a;
  stack u16[MLKEM_N] b;
  stack u16[MLKEM_N] r;
  reg u16 t;
  inline int i;

  for i = 0 to MLKEM_N {
    t = (u16)[ap + 2*i];
    a[i] = t;
    t = (u16)[bp + 2*i];
    b[i] = t;
    t = (u16)[rp + 2*i];
    r[i] = t;
  }

  r = _poly_basemul(r, a, b);

  for i = 0 to MLKEM_N {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}

export fn poly_ntt_jazz(reg u64 rp) 
{
  stack u16[MLKEM_N] r;
  reg u16 t;
  inline int i;

  for i = 0 to MLKEM_N {
    t = (u16)[rp + 2*i];
    r[i] = t;
  }

  r = _poly_ntt(r);

  for i = 0 to MLKEM_N {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}

export fn poly_invntt_jazz(reg u64 rp) 
{
  stack u16[MLKEM_N] r;
  reg u16 t;
  inline int i;

  for i = 0 to MLKEM_N {
    t = (u16)[rp + 2*i];
    r[i] = t;
  }
  

  r = _poly_invntt(r);

  for i = 0 to MLKEM_N {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}

export fn poly_frombytes_jazz(reg u64 rp, reg u64 ap) 
{
  stack u16[MLKEM_N] r;
  reg u16 t;
  inline int i;

  r = _poly_frombytes(r, ap);


  for i = 0 to MLKEM_N {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}
export fn poly_tobytes_jazz(reg u64 rp, reg u64 ap) 
{
  stack u16[MLKEM_N] a;
  reg u16 t;
  inline int i;

  for i = 0 to MLKEM_N {
    t = (u16)[ap + 2*i];
    a[i] = t;
  }
  
  a = _poly_tobytes(rp, a);
}
fn _poly_nttpack(reg ptr u16[MLKEM_N] rp) -> reg ptr u16[MLKEM_N]
{
  reg u512 r0 r1 r2 r3 r4 r5 r6 r7;

  r0 = rp.[u512 64*0];
  r1 = rp.[u512 64*1];
  r2 = rp.[u512 64*2];
  r3 = rp.[u512 64*3];
  r4 = rp.[u512 64*4];
  r5 = rp.[u512 64*5];
  r6 = rp.[u512 64*6];
  r7 = rp.[u512 64*7];

  r0, r1, r2, r3, r4, r5, r6, r7 = __nttpack256(r0, r1, r2, r3, r4, r5, r6, r7);

  rp.[u512 64*0] = r0;
  rp.[u512 64*1] = r1;
  rp.[u512 64*2] = r2;
  rp.[u512 64*3] = r3;
  rp.[u512 64*4] = r4;
  rp.[u512 64*5] = r5;
  rp.[u512 64*6] = r6;
  rp.[u512 64*7] = r7;

  return rp;
}



fn _poly_nttunpack(reg ptr u16[MLKEM_N] rp) -> reg ptr u16[MLKEM_N]
{
  reg u512 r0 r1 r2 r3 r4 r5 r6 r7;

  r0 = rp.[u512 64*0];
  r1 = rp.[u512 64*1];
  r2 = rp.[u512 64*2];
  r3 = rp.[u512 64*3];
  r4 = rp.[u512 64*4];
  r5 = rp.[u512 64*5];
  r6 = rp.[u512 64*6];
  r7 = rp.[u512 64*7];

  r0, r1, r2, r3, r4, r5, r6, r7 = __nttunpack256(r0, r1, r2, r3, r4, r5, r6, r7);

  rp.[u512 64*0] = r0;
  rp.[u512 64*1] = r1;
  rp.[u512 64*2] = r2;
  rp.[u512 64*3] = r3;
  rp.[u512 64*4] = r4;
  rp.[u512 64*5] = r5;
  rp.[u512 64*6] = r6;
  rp.[u512 64*7] = r7;

  return rp;
}